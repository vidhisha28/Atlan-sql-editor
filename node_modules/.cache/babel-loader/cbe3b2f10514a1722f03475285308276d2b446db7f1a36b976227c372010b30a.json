{"ast":null,"code":"import TABLE_NAMES from \"../constants/constants\";\nimport alasql from \"alasql\";\nimport toast from \"react-hot-toast\";\nconst getURL = tableName => \"https://api.github.com/repos/graphql-compose/graphql-compose-examples/contents/examples/northwind/data/csv/\".concat(tableName, \".csv\");\nconst convertToJSON = async decodedData => {\n  try {\n    const data = await alasql.promise(\"SELECT * FROM CSV(?, {headers: false, separator:','})\", [decodedData]);\n    toast.success(\"Query executed successfully\");\n    return {\n      data: data,\n      status: \"success\"\n    };\n  } catch (e) {\n    toast.success(\"Oh No! We can't understand your query. Would you mind checking it.\");\n    return {\n      data: \"\",\n      status: \"error\"\n    };\n  }\n};\nconst fetchData = (tableName, setResult, setResultIsLoading, setHistory, query) => {\n  if (TABLE_NAMES.includes(tableName)) {\n    const storedData = localStorage.getItem(\"northwind-data-csv\");\n    const object = JSON.parse(storedData);\n    if (object === null || object[tableName] === undefined) {\n      fetch(getURL(tableName), {\n        headers: {\n          Accept: \"application/vnd.github.v4+raw\"\n        }\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          toast.error(\"Oh! We might have consumed all the free API calls\");\n          setResultIsLoading(false);\n        }\n      }).then(data => {\n        const incodedData = data.content.replace(\"\\n\", \"\");\n        const localdata = localStorage.getItem(\"northwind-data-csv\");\n        const object = JSON.parse(localdata);\n        if (object !== null) {\n          object[tableName] = incodedData;\n          localStorage.setItem(\"northwind-data-csv\", JSON.stringify(object));\n        } else {\n          const newObject = {};\n          newObject[tableName] = incodedData;\n          localStorage.setItem(\"northwind-data-csv\", JSON.stringify(newObject));\n        }\n        convertToJSON(atob(incodedData)).then(_ref => {\n          let {\n            data,\n            status\n          } = _ref;\n          setResult(data);\n          setResultIsLoading(false);\n          setHistory(prev => [{\n            query: query,\n            status: status\n          }, ...prev]);\n        });\n      }).catch(err => {\n        toast.error(\"Error occured : \".concat(err.message));\n        setResultIsLoading(false);\n      });\n    } else {\n      const localdata = localStorage.getItem(\"northwind-data-csv\");\n      const object = JSON.parse(localdata);\n      convertToJSON(atob(object[tableName])).then(_ref2 => {\n        let {\n          data,\n          status\n        } = _ref2;\n        setResult(data);\n        setResultIsLoading(false);\n        setHistory(prev => [{\n          query: query,\n          status: status\n        }, ...prev]);\n      });\n    }\n  } else {\n    toast.error(\"Sorry! We don't have any table by that name\");\n    setResultIsLoading(false);\n  }\n};\nexport { fetchData };","map":{"version":3,"names":["TABLE_NAMES","alasql","toast","getURL","tableName","concat","convertToJSON","decodedData","data","promise","success","status","e","fetchData","setResult","setResultIsLoading","setHistory","query","includes","storedData","localStorage","getItem","object","JSON","parse","undefined","fetch","headers","Accept","then","res","ok","json","error","incodedData","content","replace","localdata","setItem","stringify","newObject","atob","_ref","prev","catch","err","message","_ref2"],"sources":["C:/Users/Vidhisha/Downloads/SQL-Editor-main/SQL-Editor-main/src/helpers/helpers.js"],"sourcesContent":["import TABLE_NAMES from \"../constants/constants\";\r\nimport alasql from \"alasql\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst getURL = (tableName) =>\r\n  `https://api.github.com/repos/graphql-compose/graphql-compose-examples/contents/examples/northwind/data/csv/${tableName}.csv`;\r\n\r\nconst convertToJSON = async (decodedData) => {\r\n  try {\r\n    const data = await alasql.promise(\r\n      \"SELECT * FROM CSV(?, {headers: false, separator:','})\",\r\n      [decodedData]\r\n    );\r\n    toast.success(\"Query executed successfully\");\r\n    return { data: data, status: \"success\" };\r\n  } catch (e) {\r\n    toast.success(\r\n      \"Oh No! We can't understand your query. Would you mind checking it.\"\r\n    );\r\n    return { data: \"\", status: \"error\" };\r\n  }\r\n};\r\n\r\nconst fetchData = (\r\n  tableName,\r\n  setResult,\r\n  setResultIsLoading,\r\n  setHistory,\r\n  query\r\n) => {\r\n  if (TABLE_NAMES.includes(tableName)) {\r\n    const storedData = localStorage.getItem(\"northwind-data-csv\");\r\n    const object = JSON.parse(storedData);\r\n\r\n    if (object === null || object[tableName] === undefined) {\r\n      fetch(getURL(tableName), {\r\n        headers: {\r\n          Accept: \"application/vnd.github.v4+raw\"\r\n        }\r\n      })\r\n        .then((res) => {\r\n          if (res.ok) {\r\n            return res.json();\r\n          } else {\r\n            toast.error(\"Oh! We might have consumed all the free API calls\");\r\n            setResultIsLoading(false);\r\n          }\r\n        })\r\n        .then((data) => {\r\n          const incodedData = data.content.replace(\"\\n\", \"\");\r\n          const localdata = localStorage.getItem(\"northwind-data-csv\");\r\n          const object = JSON.parse(localdata);\r\n          if (object !== null) {\r\n            object[tableName] = incodedData;\r\n            localStorage.setItem(\"northwind-data-csv\", JSON.stringify(object));\r\n          } else {\r\n            const newObject = {};\r\n            newObject[tableName] = incodedData;\r\n            localStorage.setItem(\r\n              \"northwind-data-csv\",\r\n              JSON.stringify(newObject)\r\n            );\r\n          }\r\n          convertToJSON(atob(incodedData)).then(({ data, status }) => {\r\n            setResult(data);\r\n            setResultIsLoading(false);\r\n            setHistory((prev) => [{ query: query, status: status }, ...prev]);\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          toast.error(`Error occured : ${err.message}`);\r\n          setResultIsLoading(false);\r\n        });\r\n    } else {\r\n      const localdata = localStorage.getItem(\"northwind-data-csv\");\r\n      const object = JSON.parse(localdata);\r\n\r\n      convertToJSON(atob(object[tableName])).then(({ data, status }) => {\r\n        setResult(data);\r\n        setResultIsLoading(false);\r\n        setHistory((prev) => [{ query: query, status: status }, ...prev]);\r\n      });\r\n    }\r\n  } else {\r\n    toast.error(\"Sorry! We don't have any table by that name\");\r\n    setResultIsLoading(false);\r\n  }\r\n};\r\n\r\nexport { fetchData };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}