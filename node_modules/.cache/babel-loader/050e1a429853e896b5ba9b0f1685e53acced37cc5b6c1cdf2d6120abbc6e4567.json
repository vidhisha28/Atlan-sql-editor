{"ast":null,"code":"/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n  /**\n  Create a new node prop type.\n  */\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n    this.deserialize = config.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  }\n  /**\n  This is meant to be used with\n  [`NodeSet.extend`](#common.NodeSet.extend) or\n  [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  prop values for each node type in the set. Takes a [match\n  object](#common.NodeType^match) or function that returns undefined\n  if the node type doesn't get this prop, and the prop's value if\n  it does.\n  */\n  add(match) {\n    if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n    if (typeof match != \"function\") match = NodeType.match(match);\n    return type => {\n      let result = match(type);\n      return result === undefined ? null : [this, result];\n    };\n  }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({\n  deserialize: value => {\n    if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\") throw new RangeError(\"Invalid value for isolate: \" + value);\n    return value || \"auto\";\n  }\n});\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({\n  perNode: true\n});\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({\n  perNode: true\n});\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({\n  perNode: true\n});\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n  constructor(\n  /**\n  The inner tree.\n  */\n  tree,\n  /**\n  If this is null, this tree replaces the entire node (it will\n  be included in the regular iteration instead of its host\n  node). If not, only the given ranges are considered to be\n  covered by this tree. This is used for trees that are mixed in\n  a way that isn't strictly hierarchical. Such mounted trees are\n  only entered by [`resolveInner`](#common.Tree.resolveInner)\n  and [`enter`](#common.SyntaxNode.enter).\n  */\n  overlay,\n  /**\n  The parser used to create this subtree.\n  */\n  parser) {\n    this.tree = tree;\n    this.overlay = overlay;\n    this.parser = parser;\n  }\n  /**\n  @internal\n  */\n  static get(tree) {\n    return tree && tree.props && tree.props[NodeProp.mounted.id];\n  }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The name of the node type. Not necessarily unique, but if the\n  grammar was written properly, different node types with the\n  same name within a node set should play the same semantic\n  role.\n  */\n  name,\n  /**\n  @internal\n  */\n  props,\n  /**\n  The id of this node in its set. Corresponds to the term ids\n  used in the parser.\n  */\n  id) {\n    let flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.name = name;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  }\n  /**\n  Define a node type.\n  */\n  static define(spec) {\n    let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n    let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) | (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n    let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n    if (spec.props) for (let src of spec.props) {\n      if (!Array.isArray(src)) src = src(type);\n      if (src) {\n        if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n        props[src[0].id] = src[1];\n      }\n    }\n    return type;\n  }\n  /**\n  Retrieves a node prop for this type. Will return `undefined` if\n  the prop isn't present on this node.\n  */\n  prop(prop) {\n    return this.props[prop.id];\n  }\n  /**\n  True when this is the top node of a grammar.\n  */\n  get isTop() {\n    return (this.flags & 1 /* NodeFlag.Top */) > 0;\n  }\n  /**\n  True when this node is produced by a skip rule.\n  */\n  get isSkipped() {\n    return (this.flags & 2 /* NodeFlag.Skipped */) > 0;\n  }\n  /**\n  Indicates whether this is an error node.\n  */\n  get isError() {\n    return (this.flags & 4 /* NodeFlag.Error */) > 0;\n  }\n  /**\n  When true, this node type doesn't correspond to a user-declared\n  named node, for example because it is used to cache repetition.\n  */\n  get isAnonymous() {\n    return (this.flags & 8 /* NodeFlag.Anonymous */) > 0;\n  }\n  /**\n  Returns true when this node's name or one of its\n  [groups](#common.NodeProp^group) matches the given string.\n  */\n  is(name) {\n    if (typeof name == 'string') {\n      if (this.name == name) return true;\n      let group = this.prop(NodeProp.group);\n      return group ? group.indexOf(name) > -1 : false;\n    }\n    return this.id == name;\n  }\n  /**\n  Create a function from node types to arbitrary values by\n  specifying an object whose property names are node or\n  [group](#common.NodeProp^group) names. Often useful with\n  [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  names, separated by spaces, in a single property name to map\n  multiple node names to a single value.\n  */\n  static match(map) {\n    let direct = Object.create(null);\n    for (let prop in map) for (let name of prop.split(\" \")) direct[name] = map[prop];\n    return node => {\n      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n        let found = direct[i < 0 ? node.name : groups[i]];\n        if (found) return found;\n      }\n    };\n  }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n  /**\n  Create a set with the given types. The `id` property of each\n  type should correspond to its position within the array.\n  */\n  constructor(\n  /**\n  The node types in this set, by id.\n  */\n  types) {\n    this.types = types;\n    for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  }\n  /**\n  Create a copy of this set with some node properties added. The\n  arguments to this method can be created with\n  [`NodeProp.add`](#common.NodeProp.add).\n  */\n  extend() {\n    let newTypes = [];\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n    for (let type of this.types) {\n      let newProps = null;\n      for (let source of props) {\n        let add = source(type);\n        if (add) {\n          if (!newProps) newProps = Object.assign({}, type.props);\n          newProps[add[0].id] = add[1];\n        }\n      }\n      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n    }\n    return new NodeSet(newTypes);\n  }\n}\nconst CachedNode = new WeakMap(),\n  CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n  /**\n  When enabled, iteration will only visit [`Tree`](#common.Tree)\n  objects, not nodes packed into\n  [`TreeBuffer`](#common.TreeBuffer)s.\n  */\n  IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n  /**\n  Enable this to make iteration include anonymous nodes (such as\n  the nodes that wrap repeated grammar constructs into a balanced\n  tree).\n  */\n  IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n  /**\n  By default, regular [mounted](#common.NodeProp^mounted) nodes\n  replace their base node in iteration. Enable this to ignore them\n  instead.\n  */\n  IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n  /**\n  This option only applies in\n  [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n  library to not enter mounted overlays if one covers the given\n  position.\n  */\n  IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n  /**\n  Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  */\n  constructor(\n  /**\n  The type of the top node.\n  */\n  type,\n  /**\n  This node's child nodes.\n  */\n  children,\n  /**\n  The positions (offsets relative to the start of this tree) of\n  the children.\n  */\n  positions,\n  /**\n  The total length of this tree\n  */\n  length,\n  /**\n  Per-node [node props](#common.NodeProp) to associate with this node.\n  */\n  props) {\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length;\n    /**\n    @internal\n    */\n    this.props = null;\n    if (props && props.length) {\n      this.props = Object.create(null);\n      for (let [prop, value] of props) this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n    }\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let mounted = MountedTree.get(this);\n    if (mounted && !mounted.overlay) return mounted.tree.toString();\n    let children = \"\";\n    for (let ch of this.children) {\n      let str = ch.toString();\n      if (str) {\n        if (children) children += \",\";\n        children += str;\n      }\n    }\n    return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) positioned at the top of\n  the tree. Mode can be used to [control](#common.IterMode) which\n  nodes the cursor visits.\n  */\n  cursor() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new TreeCursor(this.topNode, mode);\n  }\n  /**\n  Get a [tree cursor](#common.TreeCursor) pointing into this tree\n  at the given position and side (see\n  [`moveTo`](#common.TreeCursor.moveTo).\n  */\n  cursorAt(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let scope = CachedNode.get(this) || this.topNode;\n    let cursor = new TreeCursor(scope);\n    cursor.moveTo(pos, side);\n    CachedNode.set(this, cursor._tree);\n    return cursor;\n  }\n  /**\n  Get a [syntax node](#common.SyntaxNode) object for the top of the\n  tree.\n  */\n  get topNode() {\n    return new TreeNode(this, 0, 0, null);\n  }\n  /**\n  Get the [syntax node](#common.SyntaxNode) at the given position.\n  If `side` is -1, this will move into nodes that end at the\n  position. If 1, it'll move into nodes that start at the\n  position. With 0, it'll only enter nodes that cover the position\n  from both sides.\n  \n  Note that this will not enter\n  [overlays](#common.MountedTree.overlay), and you often want\n  [`resolveInner`](#common.Tree.resolveInner) instead.\n  */\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n    CachedNode.set(this, node);\n    return node;\n  }\n  /**\n  Like [`resolve`](#common.Tree.resolve), but will enter\n  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  pointing into the innermost overlaid tree at the given position\n  (with parent links going through all parent structure, including\n  the host trees).\n  */\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n    CachedInnerNode.set(this, node);\n    return node;\n  }\n  /**\n  In some situations, it can be useful to iterate through all\n  nodes around a position, including those in overlays that don't\n  directly cover the position. This method gives you an iterator\n  that will produce all nodes, from small to big, around the given\n  position.\n  */\n  resolveStack(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return stackIterator(this, pos, side);\n  }\n  /**\n  Iterate over the tree and its children, calling `enter` for any\n  node that touches the `from`/`to` region (if given) before\n  running over such a node's children, and `leave` (if given) when\n  leaving the node. When `enter` returns `false`, that node will\n  not have its children iterated over (or `leave` called).\n  */\n  iterate(spec) {\n    let {\n      enter,\n      leave,\n      from = 0,\n      to = this.length\n    } = spec;\n    let mode = spec.mode || 0,\n      anon = (mode & IterMode.IncludeAnonymous) > 0;\n    for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n      let entered = false;\n      if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n        if (c.firstChild()) continue;\n        entered = true;\n      }\n      for (;;) {\n        if (entered && leave && (anon || !c.type.isAnonymous)) leave(c);\n        if (c.nextSibling()) break;\n        if (!c.parent()) return;\n        entered = true;\n      }\n    }\n  }\n  /**\n  Get the value of the given [node prop](#common.NodeProp) for this\n  node. Works with both per-node and per-type props.\n  */\n  prop(prop) {\n    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n  }\n  /**\n  Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  format that can be passed to the [`Tree`](#common.Tree)\n  constructor.\n  */\n  get propValues() {\n    let result = [];\n    if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);\n    return result;\n  }\n  /**\n  Balance the direct children of this tree, producing a copy of\n  which may have children grouped into subtrees with type\n  [`NodeType.none`](#common.NodeType^none).\n  */\n  balance() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.children.length <= 8 /* Balance.BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n  }\n  /**\n  Build a tree from a postfix-ordered buffer of node information,\n  or a cursor over such a buffer.\n  */\n  static build(data) {\n    return buildTree(data);\n  }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n  constructor(buffer, index) {\n    this.buffer = buffer;\n    this.index = index;\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  get pos() {\n    return this.index;\n  }\n  next() {\n    this.index -= 4;\n  }\n  fork() {\n    return new FlatBufferCursor(this.buffer, this.index);\n  }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n  /**\n  Create a tree buffer.\n  */\n  constructor(\n  /**\n  The buffer's content.\n  */\n  buffer,\n  /**\n  The total length of the group of nodes in the buffer.\n  */\n  length,\n  /**\n  The node set used in this buffer.\n  */\n  set) {\n    this.buffer = buffer;\n    this.length = length;\n    this.set = set;\n  }\n  /**\n  @internal\n  */\n  get type() {\n    return NodeType.none;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    let result = [];\n    for (let index = 0; index < this.buffer.length;) {\n      result.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n    return result.join(\",\");\n  }\n  /**\n  @internal\n  */\n  childString(index) {\n    let id = this.buffer[index],\n      endIndex = this.buffer[index + 3];\n    let type = this.set.types[id],\n      result = type.name;\n    if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n    index += 4;\n    if (endIndex == index) return result;\n    let children = [];\n    while (index < endIndex) {\n      children.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n    return result + \"(\" + children.join(\",\") + \")\";\n  }\n  /**\n  @internal\n  */\n  findChild(startIndex, endIndex, dir, pos, side) {\n    let {\n        buffer\n      } = this,\n      pick = -1;\n    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n        pick = i;\n        if (dir > 0) break;\n      }\n    }\n    return pick;\n  }\n  /**\n  @internal\n  */\n  slice(startI, endI, from) {\n    let b = this.buffer;\n    let copy = new Uint16Array(endI - startI),\n      len = 0;\n    for (let i = startI, j = 0; i < endI;) {\n      copy[j++] = b[i++];\n      copy[j++] = b[i++] - from;\n      let to = copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - startI;\n      len = Math.max(len, to);\n    }\n    return new TreeBuffer(copy, len, this.set);\n  }\n}\nfunction checkSide(side, pos, from, to) {\n  switch (side) {\n    case -2 /* Side.Before */:\n      return from < pos;\n    case -1 /* Side.AtOrBefore */:\n      return to >= pos && from < pos;\n    case 0 /* Side.Around */:\n      return from < pos && to > pos;\n    case 1 /* Side.AtOrAfter */:\n      return from <= pos && to > pos;\n    case 2 /* Side.After */:\n      return to > pos;\n    case 4 /* Side.DontCare */:\n      return true;\n  }\n}\nfunction resolveNode(node, pos, side, overlays) {\n  var _a;\n  // Move up to a node that actually holds the position, if possible\n  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {\n    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n    if (!parent) return node;\n    node = parent;\n  }\n  let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n  // Must go up out of overlays when those do not overlap with pos\n  if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n    if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;\n  }\n  for (;;) {\n    let inner = node.enter(pos, side, mode);\n    if (!inner) return node;\n    node = inner;\n  }\n}\nclass BaseNode {\n  cursor() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new TreeCursor(this, mode);\n  }\n  getChild(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n  getChildren(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return getChildren(this, type, before, after);\n  }\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, false);\n  }\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, true);\n  }\n  matchContext(context) {\n    return matchNodeContext(this, context);\n  }\n  enterUnfinishedNodesBefore(pos) {\n    let scan = this.childBefore(pos),\n      node = this;\n    while (scan) {\n      let last = scan.lastChild;\n      if (!last || last.to != scan.to) break;\n      if (last.type.isError && last.from == last.to) {\n        node = scan;\n        scan = last.prevSibling;\n      } else {\n        scan = last;\n      }\n    }\n    return node;\n  }\n  get node() {\n    return this;\n  }\n  get next() {\n    return this.parent;\n  }\n}\nclass TreeNode extends BaseNode {\n  constructor(_tree, from,\n  // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n  index, _parent) {\n    super();\n    this._tree = _tree;\n    this.from = from;\n    this.index = index;\n    this._parent = _parent;\n  }\n  get type() {\n    return this._tree.type;\n  }\n  get name() {\n    return this._tree.type.name;\n  }\n  get to() {\n    return this.from + this._tree.length;\n  }\n  nextChild(i, dir, pos, side) {\n    let mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    for (let parent = this;;) {\n      for (let {\n          children,\n          positions\n        } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n        let next = children[i],\n          start = positions[i] + parent.from;\n        if (!checkSide(side, pos, start, start + next.length)) continue;\n        if (next instanceof TreeBuffer) {\n          if (mode & IterMode.ExcludeBuffers) continue;\n          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n          if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n        } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {\n          let mounted;\n          if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);\n          let inner = new TreeNode(next, start, i, parent);\n          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n        }\n      }\n      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;\n      if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;\n      parent = parent._parent;\n      if (!parent) return null;\n    }\n  }\n  get firstChild() {\n    return this.nextChild(0, 1, 0, 4 /* Side.DontCare */);\n  }\n  get lastChild() {\n    return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */);\n  }\n  childAfter(pos) {\n    return this.nextChild(0, 1, pos, 2 /* Side.After */);\n  }\n  childBefore(pos) {\n    return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */);\n  }\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let mounted;\n    if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n      let rPos = pos - this.from;\n      for (let {\n        from,\n        to\n      } of mounted.overlay) {\n        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n      }\n    }\n    return this.nextChild(0, 1, pos, side, mode);\n  }\n  nextSignificantParent() {\n    let val = this;\n    while (val.type.isAnonymous && val._parent) val = val._parent;\n    return val;\n  }\n  get parent() {\n    return this._parent ? this._parent.nextSignificantParent() : null;\n  }\n  get nextSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n  }\n  get prevSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n  }\n  get tree() {\n    return this._tree;\n  }\n  toTree() {\n    return this._tree;\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this._tree.toString();\n  }\n}\nfunction getChildren(node, type, before, after) {\n  let cur = node.cursor(),\n    result = [];\n  if (!cur.firstChild()) return result;\n  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;\n  for (;;) {\n    if (after != null && cur.type.is(after)) return result;\n    if (cur.type.is(type)) result.push(cur.node);\n    if (!cur.nextSibling()) return after == null ? result : [];\n  }\n}\nfunction matchNodeContext(node, context) {\n  let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;\n  for (let p = node.parent; i >= 0; p = p.parent) {\n    if (!p) return false;\n    if (!p.type.isAnonymous) {\n      if (context[i] && context[i] != p.name) return false;\n      i--;\n    }\n  }\n  return true;\n}\nclass BufferContext {\n  constructor(parent, buffer, index, start) {\n    this.parent = parent;\n    this.buffer = buffer;\n    this.index = index;\n    this.start = start;\n  }\n}\nclass BufferNode extends BaseNode {\n  get name() {\n    return this.type.name;\n  }\n  get from() {\n    return this.context.start + this.context.buffer.buffer[this.index + 1];\n  }\n  get to() {\n    return this.context.start + this.context.buffer.buffer[this.index + 2];\n  }\n  constructor(context, _parent, index) {\n    super();\n    this.context = context;\n    this._parent = _parent;\n    this.index = index;\n    this.type = context.buffer.set.types[context.buffer.buffer[index]];\n  }\n  child(dir, pos, side) {\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n  get firstChild() {\n    return this.child(1, 0, 4 /* Side.DontCare */);\n  }\n  get lastChild() {\n    return this.child(-1, 0, 4 /* Side.DontCare */);\n  }\n  childAfter(pos) {\n    return this.child(1, pos, 2 /* Side.After */);\n  }\n  childBefore(pos) {\n    return this.child(-1, pos, -2 /* Side.Before */);\n  }\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (mode & IterMode.ExcludeBuffers) return null;\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n  get parent() {\n    return this._parent || this.context.parent.nextSignificantParent();\n  }\n  externalSibling(dir) {\n    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n  }\n  get nextSibling() {\n    let {\n      buffer\n    } = this.context;\n    let after = buffer.buffer[this.index + 3];\n    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);\n    return this.externalSibling(1);\n  }\n  get prevSibling() {\n    let {\n      buffer\n    } = this.context;\n    let parentStart = this._parent ? this._parent.index + 4 : 0;\n    if (this.index == parentStart) return this.externalSibling(-1);\n    return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n  }\n  get tree() {\n    return null;\n  }\n  toTree() {\n    let children = [],\n      positions = [];\n    let {\n      buffer\n    } = this.context;\n    let startI = this.index + 4,\n      endI = buffer.buffer[this.index + 3];\n    if (endI > startI) {\n      let from = buffer.buffer[this.index + 1];\n      children.push(buffer.slice(startI, endI, from));\n      positions.push(0);\n    }\n    return new Tree(this.type, children, positions, this.to - this.from);\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this.context.buffer.childString(this.index);\n  }\n}\nfunction iterStack(heads) {\n  if (!heads.length) return null;\n  let pick = 0,\n    picked = heads[0];\n  for (let i = 1; i < heads.length; i++) {\n    let node = heads[i];\n    if (node.from > picked.from || node.to < picked.to) {\n      picked = node;\n      pick = i;\n    }\n  }\n  let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n  let newHeads = heads.slice();\n  if (next) newHeads[pick] = next;else newHeads.splice(pick, 1);\n  return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n  constructor(heads, node) {\n    this.heads = heads;\n    this.node = node;\n  }\n  get next() {\n    return iterStack(this.heads);\n  }\n}\nfunction stackIterator(tree, pos, side) {\n  let inner = tree.resolveInner(pos, side),\n    layers = null;\n  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n    if (scan.index < 0) {\n      // This is an overlay root\n      let parent = scan.parent;\n      (layers || (layers = [inner])).push(parent.resolve(pos, side));\n      scan = parent;\n    } else {\n      let mount = MountedTree.get(scan.tree);\n      // Relevant overlay branching off\n      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n        let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n        (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n      }\n    }\n  }\n  return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n  /**\n  Shorthand for `.type.name`.\n  */\n  get name() {\n    return this.type.name;\n  }\n  /**\n  @internal\n  */\n  constructor(node) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.mode = mode;\n    /**\n    @internal\n    */\n    this.buffer = null;\n    this.stack = [];\n    /**\n    @internal\n    */\n    this.index = 0;\n    this.bufferNode = null;\n    if (node instanceof TreeNode) {\n      this.yieldNode(node);\n    } else {\n      this._tree = node.context.parent;\n      this.buffer = node.context;\n      for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);\n      this.bufferNode = node;\n      this.yieldBuf(node.index);\n    }\n  }\n  yieldNode(node) {\n    if (!node) return false;\n    this._tree = node;\n    this.type = node.type;\n    this.from = node.from;\n    this.to = node.to;\n    return true;\n  }\n  yieldBuf(index, type) {\n    this.index = index;\n    let {\n      start,\n      buffer\n    } = this.buffer;\n    this.type = type || buffer.set.types[buffer.buffer[index]];\n    this.from = start + buffer.buffer[index + 1];\n    this.to = start + buffer.buffer[index + 2];\n    return true;\n  }\n  /**\n  @internal\n  */\n  yield(node) {\n    if (!node) return false;\n    if (node instanceof TreeNode) {\n      this.buffer = null;\n      return this.yieldNode(node);\n    }\n    this.buffer = node.context;\n    return this.yieldBuf(node.index, node.type);\n  }\n  /**\n  @internal\n  */\n  toString() {\n    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n  }\n  /**\n  @internal\n  */\n  enterChild(dir, pos, side) {\n    if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n    let {\n      buffer\n    } = this.buffer;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n    if (index < 0) return false;\n    this.stack.push(this.index);\n    return this.yieldBuf(index);\n  }\n  /**\n  Move the cursor to this node's first child. When this returns\n  false, the node has no child, and the cursor has not been moved.\n  */\n  firstChild() {\n    return this.enterChild(1, 0, 4 /* Side.DontCare */);\n  }\n  /**\n  Move the cursor to this node's last child.\n  */\n  lastChild() {\n    return this.enterChild(-1, 0, 4 /* Side.DontCare */);\n  }\n  /**\n  Move the cursor to the first child that ends after `pos`.\n  */\n  childAfter(pos) {\n    return this.enterChild(1, pos, 2 /* Side.After */);\n  }\n  /**\n  Move to the last child that starts before `pos`.\n  */\n  childBefore(pos) {\n    return this.enterChild(-1, pos, -2 /* Side.Before */);\n  }\n  /**\n  Move the cursor to the child around `pos`. If side is -1 the\n  child may end at that position, when 1 it may start there. This\n  will also enter [overlaid](#common.MountedTree.overlay)\n  [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n  set to false.\n  */\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;\n    if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));\n    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n  }\n  /**\n  Move to the node's parent node, if this isn't the top node.\n  */\n  parent() {\n    if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n    if (this.stack.length) return this.yieldBuf(this.stack.pop());\n    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n    this.buffer = null;\n    return this.yieldNode(parent);\n  }\n  /**\n  @internal\n  */\n  sibling(dir) {\n    if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n    let {\n        buffer\n      } = this.buffer,\n      d = this.stack.length - 1;\n    if (dir < 0) {\n      let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n      if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    } else {\n      let after = buffer.buffer[this.index + 3];\n      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n    }\n    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n  }\n  /**\n  Move to this node's next sibling, if any.\n  */\n  nextSibling() {\n    return this.sibling(1);\n  }\n  /**\n  Move to this node's previous sibling, if any.\n  */\n  prevSibling() {\n    return this.sibling(-1);\n  }\n  atLastNode(dir) {\n    let index,\n      parent,\n      {\n        buffer\n      } = this;\n    if (buffer) {\n      if (dir > 0) {\n        if (this.index < buffer.buffer.buffer.length) return false;\n      } else {\n        for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;\n      }\n      ({\n        index,\n        parent\n      } = buffer);\n    } else {\n      ({\n        index,\n        _parent: parent\n      } = this._tree);\n    }\n    for (; parent; ({\n      index,\n      _parent: parent\n    } = parent)) {\n      if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n        let child = parent._tree.children[i];\n        if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;\n      }\n    }\n    return true;\n  }\n  move(dir, enter) {\n    if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */)) return true;\n    for (;;) {\n      if (this.sibling(dir)) return true;\n      if (this.atLastNode(dir) || !this.parent()) return false;\n    }\n  }\n  /**\n  Move to the next node in a\n  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n  traversal, going from a node to its first child or, if the\n  current node is empty or `enter` is false, its next sibling or\n  the next sibling of the first parent node that has one.\n  */\n  next() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(1, enter);\n  }\n  /**\n  Move to the next node in a last-to-first pre-order traveral. A\n  node is followed by its last child or, if it has none, its\n  previous sibling or the previous sibling of the first parent\n  node that has one.\n  */\n  prev() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(-1, enter);\n  }\n  /**\n  Move the cursor to the innermost node that covers `pos`. If\n  `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n  it will enter nodes that start at `pos`.\n  */\n  moveTo(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Move up to a node that actually holds the position, if possible\n    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;\n    // Then scan down into child nodes as far as possible\n    while (this.enterChild(1, pos, side)) {}\n    return this;\n  }\n  /**\n  Get a [syntax node](#common.SyntaxNode) at the cursor's current\n  position.\n  */\n  get node() {\n    if (!this.buffer) return this._tree;\n    let cache = this.bufferNode,\n      result = null,\n      depth = 0;\n    if (cache && cache.context == this.buffer) {\n      scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n        for (let c = cache; c; c = c._parent) if (c.index == index) {\n          if (index == this.index) return c;\n          result = c;\n          depth = d + 1;\n          break scan;\n        }\n        index = this.stack[--d];\n      }\n    }\n    for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);\n    return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n  }\n  /**\n  Get the [tree](#common.Tree) that represents the current node, if\n  any. Will return null when the node is in a [tree\n  buffer](#common.TreeBuffer).\n  */\n  get tree() {\n    return this.buffer ? null : this._tree._tree;\n  }\n  /**\n  Iterate over the current node and all its descendants, calling\n  `enter` when entering a node and `leave`, if given, when leaving\n  one. When `enter` returns `false`, any children of that node are\n  skipped, and `leave` isn't called for it.\n  */\n  iterate(enter, leave) {\n    for (let depth = 0;;) {\n      let mustLeave = false;\n      if (this.type.isAnonymous || enter(this) !== false) {\n        if (this.firstChild()) {\n          depth++;\n          continue;\n        }\n        if (!this.type.isAnonymous) mustLeave = true;\n      }\n      for (;;) {\n        if (mustLeave && leave) leave(this);\n        mustLeave = this.type.isAnonymous;\n        if (this.nextSibling()) break;\n        if (!depth) return;\n        this.parent();\n        depth--;\n        mustLeave = true;\n      }\n    }\n  }\n  /**\n  Test whether the current node matches a given context—a sequence\n  of direct parent node names. Empty strings in the context array\n  are treated as wildcards.\n  */\n  matchContext(context) {\n    if (!this.buffer) return matchNodeContext(this.node, context);\n    let {\n        buffer\n      } = this.buffer,\n      {\n        types\n      } = buffer.set;\n    for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n      if (d < 0) return matchNodeContext(this.node, context, i);\n      let type = types[buffer.buffer[this.stack[d]]];\n      if (!type.isAnonymous) {\n        if (context[i] && context[i] != type.name) return false;\n        i--;\n      }\n    }\n    return true;\n  }\n}\nfunction hasChild(tree) {\n  return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n  var _a;\n  let {\n    buffer,\n    nodeSet,\n    maxBufferLength = DefaultBufferLength,\n    reused = [],\n    minRepeatType = nodeSet.types.length\n  } = data;\n  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n  let types = nodeSet.types;\n  let contextHash = 0,\n    lookAhead = 0;\n  function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    let lookAheadAtStart = lookAhead;\n    while (size < 0) {\n      cursor.next();\n      if (size == -1 /* SpecialRecord.Reuse */) {\n        let node = reused[id];\n        children.push(node);\n        positions.push(start - parentStart);\n        return;\n      } else if (size == -3 /* SpecialRecord.ContextChange */) {\n        // Context change\n        contextHash = id;\n        return;\n      } else if (size == -4 /* SpecialRecord.LookAhead */) {\n        lookAhead = id;\n        return;\n      } else {\n        throw new RangeError(\"Unrecognized record size: \".concat(size));\n      }\n    }\n    let type = types[id],\n      node,\n      buffer;\n    let startPos = start - parentStart;\n    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n      // Small enough for a buffer, and no reused nodes inside\n      let data = new Uint16Array(buffer.size - buffer.skip);\n      let endPos = cursor.pos - buffer.size,\n        index = data.length;\n      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);\n      node = new TreeBuffer(data, end - buffer.start, nodeSet);\n      startPos = buffer.start - parentStart;\n    } else {\n      // Make it a node\n      let endPos = cursor.pos - size;\n      cursor.next();\n      let localChildren = [],\n        localPositions = [];\n      let localInRepeat = id >= minRepeatType ? id : -1;\n      let lastGroup = 0,\n        lastEnd = end;\n      while (cursor.pos > endPos) {\n        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n          if (cursor.end <= lastEnd - maxBufferLength) {\n            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n            lastGroup = localChildren.length;\n            lastEnd = cursor.end;\n          }\n          cursor.next();\n        } else if (depth > 2500 /* CutOff.Depth */) {\n          takeFlatNode(start, endPos, localChildren, localPositions);\n        } else {\n          takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n        }\n      }\n      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n      localChildren.reverse();\n      localPositions.reverse();\n      if (localInRepeat > -1 && lastGroup > 0) {\n        let make = makeBalanced(type);\n        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n      } else {\n        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n      }\n    }\n    children.push(node);\n    positions.push(startPos);\n  }\n  function takeFlatNode(parentStart, minPos, children, positions) {\n    let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n    let nodeCount = 0,\n      stopAt = -1;\n    while (cursor.pos > minPos) {\n      let {\n        id,\n        start,\n        end,\n        size\n      } = cursor;\n      if (size > 4) {\n        // Not a leaf\n        cursor.next();\n      } else if (stopAt > -1 && start < stopAt) {\n        break;\n      } else {\n        if (stopAt < 0) stopAt = end - maxBufferLength;\n        nodes.push(id, start, end);\n        nodeCount++;\n        cursor.next();\n      }\n    }\n    if (nodeCount) {\n      let buffer = new Uint16Array(nodeCount * 4);\n      let start = nodes[nodes.length - 2];\n      for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n        buffer[j++] = nodes[i];\n        buffer[j++] = nodes[i + 1] - start;\n        buffer[j++] = nodes[i + 2] - start;\n        buffer[j++] = j;\n      }\n      children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n      positions.push(start - parentStart);\n    }\n  }\n  function makeBalanced(type) {\n    return (children, positions, length) => {\n      let lookAhead = 0,\n        lastI = children.length - 1,\n        last,\n        lookAheadProp;\n      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n        if (!lastI && last.type == type && last.length == length) return last;\n        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n      }\n      return makeTree(type, children, positions, length, lookAhead);\n    };\n  }\n  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n    let localChildren = [],\n      localPositions = [];\n    while (children.length > i) {\n      localChildren.push(children.pop());\n      localPositions.push(positions.pop() + base - from);\n    }\n    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n    positions.push(from - base);\n  }\n  function makeTree(type, children, positions, length) {\n    let lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let props = arguments.length > 5 ? arguments[5] : undefined;\n    if (contextHash) {\n      let pair = [NodeProp.contextHash, contextHash];\n      props = props ? [pair].concat(props) : [pair];\n    }\n    if (lookAhead > 25) {\n      let pair = [NodeProp.lookAhead, lookAhead];\n      props = props ? [pair].concat(props) : [pair];\n    }\n    return new Tree(type, children, positions, length, props);\n  }\n  function findBufferSize(maxSize, inRepeat) {\n    // Scan through the buffer to find previous siblings that fit\n    // together in a TreeBuffer, and don't contain any reused nodes\n    // (which can't be stored in a buffer).\n    // If `inRepeat` is > -1, ignore node boundaries of that type for\n    // nesting, but make sure the end falls either at the start\n    // (`maxSize`) or before such a node.\n    let fork = cursor.fork();\n    let size = 0,\n      start = 0,\n      skip = 0,\n      minStart = fork.end - maxBufferLength;\n    let result = {\n      size: 0,\n      start: 0,\n      skip: 0\n    };\n    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n      let nodeSize = fork.size;\n      // Pretend nested repeat nodes of the same type don't exist\n      if (fork.id == inRepeat && nodeSize >= 0) {\n        // Except that we store the current state as a valid return\n        // value.\n        result.size = size;\n        result.start = start;\n        result.skip = skip;\n        skip += 4;\n        size += 4;\n        fork.next();\n        continue;\n      }\n      let startPos = fork.pos - nodeSize;\n      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n      let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n      let nodeStart = fork.start;\n      fork.next();\n      while (fork.pos > startPos) {\n        if (fork.size < 0) {\n          if (fork.size == -3 /* SpecialRecord.ContextChange */) localSkipped += 4;else break scan;\n        } else if (fork.id >= minRepeatType) {\n          localSkipped += 4;\n        }\n        fork.next();\n      }\n      start = nodeStart;\n      size += nodeSize;\n      skip += localSkipped;\n    }\n    if (inRepeat < 0 || size == maxSize) {\n      result.size = size;\n      result.start = start;\n      result.skip = skip;\n    }\n    return result.size > 4 ? result : undefined;\n  }\n  function copyToBuffer(bufferStart, buffer, index) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    cursor.next();\n    if (size >= 0 && id < minRepeatType) {\n      let startIndex = index;\n      if (size > 4) {\n        let endPos = cursor.pos - (size - 4);\n        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);\n      }\n      buffer[--index] = startIndex;\n      buffer[--index] = end - bufferStart;\n      buffer[--index] = start - bufferStart;\n      buffer[--index] = id;\n    } else if (size == -3 /* SpecialRecord.ContextChange */) {\n      contextHash = id;\n    } else if (size == -4 /* SpecialRecord.LookAhead */) {\n      lookAhead = id;\n    }\n    return index;\n  }\n  let children = [],\n    positions = [];\n  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n  let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap();\nfunction nodeSize(balanceType, node) {\n  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;\n  let size = nodeSizeCache.get(node);\n  if (size == null) {\n    size = 1;\n    for (let child of node.children) {\n      if (child.type != balanceType || !(child instanceof Tree)) {\n        size = 1;\n        break;\n      }\n      size += nodeSize(balanceType, child);\n    }\n    nodeSizeCache.set(node, size);\n  }\n  return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType,\n// The direct children and their positions\nchildren, positions,\n// The index range in children/positions to use\nfrom, to,\n// The start position of the nodes, relative to their parent.\nstart,\n// Length of the outer node\nlength,\n// Function to build the top node of the balanced tree\nmkTop,\n// Function to build internal nodes for the balanced tree\nmkTree) {\n  let total = 0;\n  for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);\n  let maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */);\n  let localChildren = [],\n    localPositions = [];\n  function divide(children, positions, from, to, offset) {\n    for (let i = from; i < to;) {\n      let groupFrom = i,\n        groupStart = positions[i],\n        groupSize = nodeSize(balanceType, children[i]);\n      i++;\n      for (; i < to; i++) {\n        let nextSize = nodeSize(balanceType, children[i]);\n        if (groupSize + nextSize >= maxChild) break;\n        groupSize += nextSize;\n      }\n      if (i == groupFrom + 1) {\n        if (groupSize > maxChild) {\n          let only = children[groupFrom]; // Only trees can have a size > 1\n          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n          continue;\n        }\n        localChildren.push(children[groupFrom]);\n      } else {\n        let length = positions[i - 1] + children[i - 1].length - groupStart;\n        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n      }\n      localPositions.push(groupStart + offset - start);\n    }\n  }\n  divide(children, positions, from, to, 0);\n  return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n  constructor() {\n    this.map = new WeakMap();\n  }\n  setBuffer(buffer, index, value) {\n    let inner = this.map.get(buffer);\n    if (!inner) this.map.set(buffer, inner = new Map());\n    inner.set(index, value);\n  }\n  getBuffer(buffer, index) {\n    let inner = this.map.get(buffer);\n    return inner && inner.get(index);\n  }\n  /**\n  Set the value for this syntax node.\n  */\n  set(node, value) {\n    if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);\n  }\n  /**\n  Retrieve value for this syntax node, if it exists in the map.\n  */\n  get(node) {\n    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n  }\n  /**\n  Set the value for the node that a cursor currently points to.\n  */\n  cursorSet(cursor, value) {\n    if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);\n  }\n  /**\n  Retrieve the value for the node that a cursor currently points\n  to.\n  */\n  cursorGet(cursor) {\n    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n  }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n  /**\n  Construct a tree fragment. You'll usually want to use\n  [`addTree`](#common.TreeFragment^addTree) and\n  [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n  calling this directly.\n  */\n  constructor(\n  /**\n  The start of the unchanged range pointed to by this fragment.\n  This refers to an offset in the _updated_ document (as opposed\n  to the original tree).\n  */\n  from,\n  /**\n  The end of the unchanged range.\n  */\n  to,\n  /**\n  The tree that this fragment is based on.\n  */\n  tree,\n  /**\n  The offset between the fragment's tree and the document that\n  this fragment can be used against. Add this when going from\n  document to tree positions, subtract it to go from tree to\n  document positions.\n  */\n  offset) {\n    let openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    this.from = from;\n    this.to = to;\n    this.tree = tree;\n    this.offset = offset;\n    this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n  }\n  /**\n  Whether the start of the fragment represents the start of a\n  parse, or the end of a change. (In the second case, it may not\n  be safe to reuse some nodes at the start, depending on the\n  parsing algorithm.)\n  */\n  get openStart() {\n    return (this.open & 1 /* Open.Start */) > 0;\n  }\n  /**\n  Whether the end of the fragment represents the end of a\n  full-document parse, or the start of a change.\n  */\n  get openEnd() {\n    return (this.open & 2 /* Open.End */) > 0;\n  }\n  /**\n  Create a set of fragments from a freshly parsed tree, or update\n  an existing set of fragments by replacing the ones that overlap\n  with a tree with content from the new tree. When `partial` is\n  true, the parse is treated as incomplete, and the resulting\n  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n  true.\n  */\n  static addTree(tree) {\n    let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n    for (let f of fragments) if (f.to > tree.length) result.push(f);\n    return result;\n  }\n  /**\n  Apply a set of edits to an array of fragments, removing or\n  splitting fragments as necessary to remove edited ranges, and\n  adjusting offsets for fragments that moved.\n  */\n  static applyChanges(fragments, changes) {\n    let minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;\n    if (!changes.length) return fragments;\n    let result = [];\n    let fI = 1,\n      nextF = fragments.length ? fragments[0] : null;\n    for (let cI = 0, pos = 0, off = 0;; cI++) {\n      let nextC = cI < changes.length ? changes[cI] : null;\n      let nextPos = nextC ? nextC.fromA : 1e9;\n      if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {\n        let cut = nextF;\n        if (pos >= cut.from || nextPos <= cut.to || off) {\n          let fFrom = Math.max(cut.from, pos) - off,\n            fTo = Math.min(cut.to, nextPos) - off;\n          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n        }\n        if (cut) result.push(cut);\n        if (nextF.to > nextPos) break;\n        nextF = fI < fragments.length ? fragments[fI++] : null;\n      }\n      if (!nextC) break;\n      pos = nextC.toA;\n      off = nextC.toA - nextC.toB;\n    }\n    return result;\n  }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n  /**\n  Start a parse, returning a [partial parse](#common.PartialParse)\n  object. [`fragments`](#common.TreeFragment) can be passed in to\n  make the parse incremental.\n  \n  By default, the entire input is parsed. You can pass `ranges`,\n  which should be a sorted array of non-empty, non-overlapping\n  ranges, to parse only those ranges. The tree returned in that\n  case will start at `ranges[0].from`.\n  */\n  startParse(input, fragments, ranges) {\n    if (typeof input == \"string\") input = new StringInput(input);\n    ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n    return this.createParse(input, fragments || [], ranges);\n  }\n  /**\n  Run a full parse, returning the resulting tree.\n  */\n  parse(input, fragments, ranges) {\n    let parse = this.startParse(input, fragments, ranges);\n    for (;;) {\n      let done = parse.advance();\n      if (done) return done;\n    }\n  }\n}\nclass StringInput {\n  constructor(string) {\n    this.string = string;\n  }\n  get length() {\n    return this.string.length;\n  }\n  chunk(from) {\n    return this.string.slice(from);\n  }\n  get lineChunks() {\n    return false;\n  }\n  read(from, to) {\n    return this.string.slice(from, to);\n  }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n  constructor(parser, parse, overlay, target, from) {\n    this.parser = parser;\n    this.parse = parse;\n    this.overlay = overlay;\n    this.target = target;\n    this.from = from;\n  }\n}\nfunction checkRanges(ranges) {\n  if (!ranges.length || ranges.some(r => r.from >= r.to)) throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n  constructor(parser, predicate, mounts, index, start, target, prev) {\n    this.parser = parser;\n    this.predicate = predicate;\n    this.mounts = mounts;\n    this.index = index;\n    this.start = start;\n    this.target = target;\n    this.prev = prev;\n    this.depth = 0;\n    this.ranges = [];\n  }\n}\nconst stoppedInner = new NodeProp({\n  perNode: true\n});\nclass MixedParse {\n  constructor(base, nest, input, fragments, ranges) {\n    this.nest = nest;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.inner = [];\n    this.innerDone = 0;\n    this.baseTree = null;\n    this.stoppedAt = null;\n    this.baseParse = base;\n  }\n  advance() {\n    if (this.baseParse) {\n      let done = this.baseParse.advance();\n      if (!done) return null;\n      this.baseParse = null;\n      this.baseTree = done;\n      this.startInner();\n      if (this.stoppedAt != null) for (let inner of this.inner) inner.parse.stopAt(this.stoppedAt);\n    }\n    if (this.innerDone == this.inner.length) {\n      let result = this.baseTree;\n      if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n      return result;\n    }\n    let inner = this.inner[this.innerDone],\n      done = inner.parse.advance();\n    if (done) {\n      this.innerDone++;\n      // This is a somewhat dodgy but super helpful hack where we\n      // patch up nodes created by the inner parse (and thus\n      // presumably not aliased anywhere else) to hold the information\n      // about the inner parse.\n      let props = Object.assign(Object.create(null), inner.target.props);\n      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n      inner.target.props = props;\n    }\n    return null;\n  }\n  get parsedPos() {\n    if (this.baseParse) return 0;\n    let pos = this.input.length;\n    for (let i = this.innerDone; i < this.inner.length; i++) {\n      if (this.inner[i].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n    }\n    return pos;\n  }\n  stopAt(pos) {\n    this.stoppedAt = pos;\n    if (this.baseParse) this.baseParse.stopAt(pos);else for (let i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);\n  }\n  startInner() {\n    let fragmentCursor = new FragmentCursor(this.fragments);\n    let overlay = null;\n    let covered = null;\n    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    scan: for (let nest, isCovered;;) {\n      let enter = true,\n        range;\n      if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n        enter = false;\n      } else if (fragmentCursor.hasNode(cursor)) {\n        if (overlay) {\n          let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n          if (match) for (let r of match.mount.overlay) {\n            let from = r.from + match.pos,\n              to = r.to + match.pos;\n            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from)) overlay.ranges.push({\n              from,\n              to\n            });\n          }\n        }\n        enter = false;\n      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n        enter = isCovered != 2 /* Cover.Full */;\n      } else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) && (cursor.from < cursor.to || !nest.overlay)) {\n        if (!cursor.tree) materialize(cursor);\n        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n        if (typeof nest.overlay == \"function\") {\n          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n        } else {\n          let ranges = punchRanges(this.ranges, nest.overlay || (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n          if (ranges.length) checkRanges(ranges);\n          if (ranges.length || !nest.overlay) this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges) : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n          if (!nest.overlay) enter = false;else if (ranges.length) covered = {\n            ranges,\n            depth: 0,\n            prev: covered\n          };\n        }\n      } else if (overlay && (range = overlay.predicate(cursor))) {\n        if (range === true) range = new Range(cursor.from, cursor.to);\n        if (range.from < range.to) overlay.ranges.push(range);\n      }\n      if (enter && cursor.firstChild()) {\n        if (overlay) overlay.depth++;\n        if (covered) covered.depth++;\n      } else {\n        for (;;) {\n          if (cursor.nextSibling()) break;\n          if (!cursor.parent()) break scan;\n          if (overlay && ! --overlay.depth) {\n            let ranges = punchRanges(this.ranges, overlay.ranges);\n            if (ranges.length) {\n              checkRanges(ranges);\n              this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n            }\n            overlay = overlay.prev;\n          }\n          if (covered && ! --covered.depth) covered = covered.prev;\n        }\n      }\n    }\n  }\n}\nfunction checkCover(covered, from, to) {\n  for (let range of covered) {\n    if (range.from >= to) break;\n    if (range.to > from) return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n  }\n  return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n  if (startI < endI) {\n    let from = buf.buffer[startI + 1];\n    nodes.push(buf.slice(startI, endI, from));\n    positions.push(from - off);\n  }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n  let {\n      node\n    } = cursor,\n    stack = [];\n  let buffer = node.context.buffer;\n  // Scan up to the nearest tree\n  do {\n    stack.push(cursor.index);\n    cursor.parent();\n  } while (!cursor.tree);\n  // Find the index of the buffer in that tree\n  let base = cursor.tree,\n    i = base.children.indexOf(buffer);\n  let buf = base.children[i],\n    b = buf.buffer,\n    newStack = [i];\n  // Split a level in the buffer, putting the nodes before and after\n  // the child that contains `node` into new buffers.\n  function split(startI, endI, type, innerOffset, length, stackPos) {\n    let targetI = stack[stackPos];\n    let children = [],\n      positions = [];\n    sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n    let from = b[targetI + 1],\n      to = b[targetI + 2];\n    newStack.push(children.length);\n    let child = stackPos ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1) : node.toTree();\n    children.push(child);\n    positions.push(from - innerOffset);\n    sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n    return new Tree(type, children, positions, length);\n  }\n  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n  // Move the cursor back to the target node\n  for (let index of newStack) {\n    let tree = cursor.tree.children[index],\n      pos = cursor.tree.positions[index];\n    cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n  }\n}\nclass StructureCursor {\n  constructor(root, offset) {\n    this.offset = offset;\n    this.done = false;\n    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n  }\n  // Move to the first node (in pre-order) that starts at or after `pos`.\n  moveTo(pos) {\n    let {\n        cursor\n      } = this,\n      p = pos - this.offset;\n    while (!this.done && cursor.from < p) {\n      if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;\n    }\n  }\n  hasNode(cursor) {\n    this.moveTo(cursor.from);\n    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n      for (let tree = this.cursor.tree;;) {\n        if (tree == cursor.tree) return true;\n        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;\n      }\n    }\n    return false;\n  }\n}\nclass FragmentCursor {\n  constructor(fragments) {\n    var _a;\n    this.fragments = fragments;\n    this.curTo = 0;\n    this.fragI = 0;\n    if (fragments.length) {\n      let first = this.curFrag = fragments[0];\n      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n      this.inner = new StructureCursor(first.tree, -first.offset);\n    } else {\n      this.curFrag = this.inner = null;\n    }\n  }\n  hasNode(node) {\n    while (this.curFrag && node.from >= this.curTo) this.nextFrag();\n    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n  }\n  nextFrag() {\n    var _a;\n    this.fragI++;\n    if (this.fragI == this.fragments.length) {\n      this.curFrag = this.inner = null;\n    } else {\n      let frag = this.curFrag = this.fragments[this.fragI];\n      this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n      this.inner = new StructureCursor(frag.tree, -frag.offset);\n    }\n  }\n  findMounts(pos, parser) {\n    var _a;\n    let result = [];\n    if (this.inner) {\n      this.inner.cursor.moveTo(pos, 1);\n      for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n        let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n        if (mount && mount.parser == parser) {\n          for (let i = this.fragI; i < this.fragments.length; i++) {\n            let frag = this.fragments[i];\n            if (frag.from >= pos.to) break;\n            if (frag.tree == this.curFrag.tree) result.push({\n              frag,\n              pos: pos.from - frag.offset,\n              mount\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\nfunction punchRanges(outer, ranges) {\n  let copy = null,\n    current = ranges;\n  for (let i = 1, j = 0; i < outer.length; i++) {\n    let gapFrom = outer[i - 1].to,\n      gapTo = outer[i].from;\n    for (; j < current.length; j++) {\n      let r = current[j];\n      if (r.from >= gapTo) break;\n      if (r.to <= gapFrom) continue;\n      if (!copy) current = copy = ranges.slice();\n      if (r.from < gapFrom) {\n        copy[j] = new Range(r.from, gapFrom);\n        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));\n      } else if (r.to > gapTo) {\n        copy[j--] = new Range(gapTo, r.to);\n      } else {\n        copy.splice(j--, 1);\n      }\n    }\n  }\n  return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n  let iA = 0,\n    iB = 0,\n    inA = false,\n    inB = false,\n    pos = -1e9;\n  let result = [];\n  for (;;) {\n    let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n    if (inA != inB) {\n      let start = Math.max(pos, from),\n        end = Math.min(nextA, nextB, to);\n      if (start < end) result.push(new Range(start, end));\n    }\n    pos = Math.min(nextA, nextB);\n    if (pos == 1e9) break;\n    if (nextA == pos) {\n      if (!inA) inA = true;else {\n        inA = false;\n        iA++;\n      }\n    }\n    if (nextB == pos) {\n      if (!inB) inB = true;else {\n        inB = false;\n        iB++;\n      }\n    }\n  }\n  return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n  let result = [];\n  for (let {\n    pos,\n    mount,\n    frag\n  } of mounts) {\n    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),\n      endPos = startPos + mount.tree.length;\n    let from = Math.max(frag.from, startPos),\n      to = Math.min(frag.to, endPos);\n    if (mount.overlay) {\n      let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n      let changes = findCoverChanges(ranges, overlay, from, to);\n      for (let i = 0, pos = from;; i++) {\n        let last = i == changes.length,\n          end = last ? to : changes[i].from;\n        if (end > pos) result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n        if (last) break;\n        pos = changes[i].to;\n      }\n    } else {\n      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n    }\n  }\n  return result;\n}\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };","map":{"version":3,"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","NodeProp","config","arguments","length","undefined","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","closedBy","str","split","openedBy","group","isolate","value","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","get","props","noProps","Object","create","name","flags","define","spec","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","_len","_key","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","resolveStack","stackIterator","iterate","enter","leave","anon","IncludeAnonymous","c","entered","firstChild","nextSibling","parent","propValues","balance","balanceRange","makeTree","build","data","buildTree","empty","FlatBufferCursor","buffer","index","start","end","size","next","fork","TreeBuffer","childString","join","endIndex","findChild","startIndex","dir","pick","checkSide","slice","startI","endI","b","copy","Uint16Array","len","j","Math","max","overlays","_a","IgnoreOverlays","scan","inner","BaseNode","getChild","before","after","r","getChildren","matchContext","context","matchNodeContext","enterUnfinishedNodesBefore","childBefore","last","lastChild","prevSibling","_parent","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","cur","p","child","externalSibling","parentStart","iterStack","heads","picked","newHeads","splice","StackIterator","layers","mount","root","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","pop","sibling","d","atLastNode","move","prev","cache","depth","mustLeave","some","nodeSet","maxBufferLength","reused","minRepeatType","takeNode","minPos","inRepeat","lookAheadAtStart","concat","startPos","findBufferSize","skip","endPos","copyToBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","takeFlatNode","reverse","make","makeBalanced","nodes","nodeCount","stopAt","lastI","lookAheadProp","base","pair","maxSize","minStart","nodeSize","localSkipped","nodeStart","bufferStart","topID","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","checkRanges","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","sliceBuf","buf","newStack","innerOffset","stackPos","targetI","StructureCursor","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB"],"sources":["C:/Users/Vidhisha/Downloads/SQL-Editor-main/SQL-Editor-main/node_modules/@lezer/common/dist/index.js"],"sourcesContent":["/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n    /**\n    Create a new node prop type.\n    */\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /**\n    This is meant to be used with\n    [`NodeSet.extend`](#common.NodeSet.extend) or\n    [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    prop values for each node type in the set. Takes a [match\n    object](#common.NodeType^match) or function that returns undefined\n    if the node type doesn't get this prop, and the prop's value if\n    it does.\n    */\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({ deserialize: value => {\n        if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\")\n            throw new RangeError(\"Invalid value for isolate: \" + value);\n        return value || \"auto\";\n    } });\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({ perNode: true });\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n    constructor(\n    /**\n    The inner tree.\n    */\n    tree, \n    /**\n    If this is null, this tree replaces the entire node (it will\n    be included in the regular iteration instead of its host\n    node). If not, only the given ranges are considered to be\n    covered by this tree. This is used for trees that are mixed in\n    a way that isn't strictly hierarchical. Such mounted trees are\n    only entered by [`resolveInner`](#common.Tree.resolveInner)\n    and [`enter`](#common.SyntaxNode.enter).\n    */\n    overlay, \n    /**\n    The parser used to create this subtree.\n    */\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n    /**\n    @internal\n    */\n    static get(tree) {\n        return tree && tree.props && tree.props[NodeProp.mounted.id];\n    }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the node type. Not necessarily unique, but if the\n    grammar was written properly, different node types with the\n    same name within a node set should play the same semantic\n    role.\n    */\n    name, \n    /**\n    @internal\n    */\n    props, \n    /**\n    The id of this node in its set. Corresponds to the term ids\n    used in the parser.\n    */\n    id, \n    /**\n    @internal\n    */\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /**\n    Define a node type.\n    */\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /**\n    Retrieves a node prop for this type. Will return `undefined` if\n    the prop isn't present on this node.\n    */\n    prop(prop) { return this.props[prop.id]; }\n    /**\n    True when this is the top node of a grammar.\n    */\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /**\n    True when this node is produced by a skip rule.\n    */\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /**\n    Indicates whether this is an error node.\n    */\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /**\n    When true, this node type doesn't correspond to a user-declared\n    named node, for example because it is used to cache repetition.\n    */\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /**\n    Returns true when this node's name or one of its\n    [groups](#common.NodeProp^group) matches the given string.\n    */\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /**\n    Create a function from node types to arbitrary values by\n    specifying an object whose property names are node or\n    [group](#common.NodeProp^group) names. Often useful with\n    [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    names, separated by spaces, in a single property name to map\n    multiple node names to a single value.\n    */\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n    /**\n    Create a set with the given types. The `id` property of each\n    type should correspond to its position within the array.\n    */\n    constructor(\n    /**\n    The node types in this set, by id.\n    */\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /**\n    Create a copy of this set with some node properties added. The\n    arguments to this method can be created with\n    [`NodeProp.add`](#common.NodeProp.add).\n    */\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n    /**\n    When enabled, iteration will only visit [`Tree`](#common.Tree)\n    objects, not nodes packed into\n    [`TreeBuffer`](#common.TreeBuffer)s.\n    */\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /**\n    Enable this to make iteration include anonymous nodes (such as\n    the nodes that wrap repeated grammar constructs into a balanced\n    tree).\n    */\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /**\n    By default, regular [mounted](#common.NodeProp^mounted) nodes\n    replace their base node in iteration. Enable this to ignore them\n    instead.\n    */\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /**\n    This option only applies in\n    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    library to not enter mounted overlays if one covers the given\n    position.\n    */\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n    /**\n    Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    */\n    constructor(\n    /**\n    The type of the top node.\n    */\n    type, \n    /**\n    This node's child nodes.\n    */\n    children, \n    /**\n    The positions (offsets relative to the start of this tree) of\n    the children.\n    */\n    positions, \n    /**\n    The total length of this tree\n    */\n    length, \n    /**\n    Per-node [node props](#common.NodeProp) to associate with this node.\n    */\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /**\n        @internal\n        */\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let mounted = MountedTree.get(this);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    the tree. Mode can be used to [control](#common.IterMode) which\n    nodes the cursor visits.\n    */\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    at the given position and side (see\n    [`moveTo`](#common.TreeCursor.moveTo).\n    */\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) object for the top of the\n    tree.\n    */\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /**\n    Get the [syntax node](#common.SyntaxNode) at the given position.\n    If `side` is -1, this will move into nodes that end at the\n    position. If 1, it'll move into nodes that start at the\n    position. With 0, it'll only enter nodes that cover the position\n    from both sides.\n    \n    Note that this will not enter\n    [overlays](#common.MountedTree.overlay), and you often want\n    [`resolveInner`](#common.Tree.resolveInner) instead.\n    */\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /**\n    Like [`resolve`](#common.Tree.resolve), but will enter\n    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    pointing into the innermost overlaid tree at the given position\n    (with parent links going through all parent structure, including\n    the host trees).\n    */\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /**\n    In some situations, it can be useful to iterate through all\n    nodes around a position, including those in overlays that don't\n    directly cover the position. This method gives you an iterator\n    that will produce all nodes, from small to big, around the given\n    position.\n    */\n    resolveStack(pos, side = 0) {\n        return stackIterator(this, pos, side);\n    }\n    /**\n    Iterate over the tree and its children, calling `enter` for any\n    node that touches the `from`/`to` region (if given) before\n    running over such a node's children, and `leave` (if given) when\n    leaving the node. When `enter` returns `false`, that node will\n    not have its children iterated over (or `leave` called).\n    */\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /**\n    Get the value of the given [node prop](#common.NodeProp) for this\n    node. Works with both per-node and per-type props.\n    */\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /**\n    Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    format that can be passed to the [`Tree`](#common.Tree)\n    constructor.\n    */\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /**\n    Balance the direct children of this tree, producing a copy of\n    which may have children grouped into subtrees with type\n    [`NodeType.none`](#common.NodeType^none).\n    */\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /**\n    Build a tree from a postfix-ordered buffer of node information,\n    or a cursor over such a buffer.\n    */\n    static build(data) { return buildTree(data); }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n    /**\n    Create a tree buffer.\n    */\n    constructor(\n    /**\n    The buffer's content.\n    */\n    buffer, \n    /**\n    The total length of the group of nodes in the buffer.\n    */\n    length, \n    /**\n    The node set used in this buffer.\n    */\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /**\n    @internal\n    */\n    get type() { return NodeType.none; }\n    /**\n    @internal\n    */\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /**\n    @internal\n    */\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /**\n    @internal\n    */\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /**\n    @internal\n    */\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass BaseNode {\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    matchContext(context) {\n        return matchNodeContext(this, context);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        let scan = this.childBefore(pos), node = this;\n        while (scan) {\n            let last = scan.lastChild;\n            if (!last || last.to != scan.to)\n                break;\n            if (last.type.isError && last.from == last.to) {\n                node = scan;\n                scan = last.prevSibling;\n            }\n            else {\n                scan = last;\n            }\n        }\n        return node;\n    }\n    get node() { return this; }\n    get next() { return this.parent; }\n}\nclass TreeNode extends BaseNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        super();\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    /**\n    @internal\n    */\n    toString() { return this._tree.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode extends BaseNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        super();\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.context.buffer.childString(this.index); }\n}\nfunction iterStack(heads) {\n    if (!heads.length)\n        return null;\n    let pick = 0, picked = heads[0];\n    for (let i = 1; i < heads.length; i++) {\n        let node = heads[i];\n        if (node.from > picked.from || node.to < picked.to) {\n            picked = node;\n            pick = i;\n        }\n    }\n    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n    let newHeads = heads.slice();\n    if (next)\n        newHeads[pick] = next;\n    else\n        newHeads.splice(pick, 1);\n    return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n    constructor(heads, node) {\n        this.heads = heads;\n        this.node = node;\n    }\n    get next() { return iterStack(this.heads); }\n}\nfunction stackIterator(tree, pos, side) {\n    let inner = tree.resolveInner(pos, side), layers = null;\n    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n        if (scan.index < 0) { // This is an overlay root\n            let parent = scan.parent;\n            (layers || (layers = [inner])).push(parent.resolve(pos, side));\n            scan = parent;\n        }\n        else {\n            let mount = MountedTree.get(scan.tree);\n            // Relevant overlay branching off\n            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n            }\n        }\n    }\n    return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n    /**\n    Shorthand for `.type.name`.\n    */\n    get name() { return this.type.name; }\n    /**\n    @internal\n    */\n    constructor(node, \n    /**\n    @internal\n    */\n    mode = 0) {\n        this.mode = mode;\n        /**\n        @internal\n        */\n        this.buffer = null;\n        this.stack = [];\n        /**\n        @internal\n        */\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    /**\n    @internal\n    */\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /**\n    @internal\n    */\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /**\n    Move the cursor to this node's first child. When this returns\n    false, the node has no child, and the cursor has not been moved.\n    */\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to this node's last child.\n    */\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to the first child that ends after `pos`.\n    */\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /**\n    Move to the last child that starts before `pos`.\n    */\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /**\n    Move the cursor to the child around `pos`. If side is -1 the\n    child may end at that position, when 1 it may start there. This\n    will also enter [overlaid](#common.MountedTree.overlay)\n    [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    set to false.\n    */\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /**\n    Move to the node's parent node, if this isn't the top node.\n    */\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /**\n    @internal\n    */\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /**\n    Move to this node's next sibling, if any.\n    */\n    nextSibling() { return this.sibling(1); }\n    /**\n    Move to this node's previous sibling, if any.\n    */\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /**\n    Move to the next node in a\n    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    traversal, going from a node to its first child or, if the\n    current node is empty or `enter` is false, its next sibling or\n    the next sibling of the first parent node that has one.\n    */\n    next(enter = true) { return this.move(1, enter); }\n    /**\n    Move to the next node in a last-to-first pre-order traveral. A\n    node is followed by its last child or, if it has none, its\n    previous sibling or the previous sibling of the first parent\n    node that has one.\n    */\n    prev(enter = true) { return this.move(-1, enter); }\n    /**\n    Move the cursor to the innermost node that covers `pos`. If\n    `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    it will enter nodes that start at `pos`.\n    */\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    position.\n    */\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /**\n    Get the [tree](#common.Tree) that represents the current node, if\n    any. Will return null when the node is in a [tree\n    buffer](#common.TreeBuffer).\n    */\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /**\n    Iterate over the current node and all its descendants, calling\n    `enter` when entering a node and `leave`, if given, when leaving\n    one. When `enter` returns `false`, any children of that node are\n    skipped, and `leave` isn't called for it.\n    */\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /**\n    Test whether the current node matches a given context—a sequence\n    of direct parent node names. Empty strings in the context array\n    are treated as wildcards.\n    */\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else if (depth > 2500 /* CutOff.Depth */) {\n                    takeFlatNode(start, endPos, localChildren, localPositions);\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function takeFlatNode(parentStart, minPos, children, positions) {\n        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n        let nodeCount = 0, stopAt = -1;\n        while (cursor.pos > minPos) {\n            let { id, start, end, size } = cursor;\n            if (size > 4) { // Not a leaf\n                cursor.next();\n            }\n            else if (stopAt > -1 && start < stopAt) {\n                break;\n            }\n            else {\n                if (stopAt < 0)\n                    stopAt = end - maxBufferLength;\n                nodes.push(id, start, end);\n                nodeCount++;\n                cursor.next();\n            }\n        }\n        if (nodeCount) {\n            let buffer = new Uint16Array(nodeCount * 4);\n            let start = nodes[nodes.length - 2];\n            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n                buffer[j++] = nodes[i];\n                buffer[j++] = nodes[i + 1] - start;\n                buffer[j++] = nodes[i + 2] - start;\n                buffer[j++] = j;\n            }\n            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n            positions.push(start - parentStart);\n        }\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /**\n    Set the value for this syntax node.\n    */\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /**\n    Retrieve value for this syntax node, if it exists in the map.\n    */\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /**\n    Set the value for the node that a cursor currently points to.\n    */\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /**\n    Retrieve the value for the node that a cursor currently points\n    to.\n    */\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n    /**\n    Construct a tree fragment. You'll usually want to use\n    [`addTree`](#common.TreeFragment^addTree) and\n    [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    calling this directly.\n    */\n    constructor(\n    /**\n    The start of the unchanged range pointed to by this fragment.\n    This refers to an offset in the _updated_ document (as opposed\n    to the original tree).\n    */\n    from, \n    /**\n    The end of the unchanged range.\n    */\n    to, \n    /**\n    The tree that this fragment is based on.\n    */\n    tree, \n    /**\n    The offset between the fragment's tree and the document that\n    this fragment can be used against. Add this when going from\n    document to tree positions, subtract it to go from tree to\n    document positions.\n    */\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /**\n    Whether the start of the fragment represents the start of a\n    parse, or the end of a change. (In the second case, it may not\n    be safe to reuse some nodes at the start, depending on the\n    parsing algorithm.)\n    */\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /**\n    Whether the end of the fragment represents the end of a\n    full-document parse, or the start of a change.\n    */\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /**\n    Create a set of fragments from a freshly parsed tree, or update\n    an existing set of fragments by replacing the ones that overlap\n    with a tree with content from the new tree. When `partial` is\n    true, the parse is treated as incomplete, and the resulting\n    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    true.\n    */\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /**\n    Apply a set of edits to an array of fragments, removing or\n    splitting fragments as necessary to remove edited ranges, and\n    adjusting offsets for fragments that moved.\n    */\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n    /**\n    Start a parse, returning a [partial parse](#common.PartialParse)\n    object. [`fragments`](#common.TreeFragment) can be passed in to\n    make the parse incremental.\n    \n    By default, the entire input is parsed. You can pass `ranges`,\n    which should be a sorted array of non-empty, non-overlapping\n    ranges, to parse only those ranges. The tree returned in that\n    case will start at `ranges[0].from`.\n    */\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /**\n    Run a full parse, returning the resulting tree.\n    */\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, from) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.from = from;\n    }\n}\nfunction checkRanges(ranges) {\n    if (!ranges.length || ranges.some(r => r.from >= r.to))\n        throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered;;) {\n            let enter = true, range;\n            if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n                enter = false;\n            }\n            else if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&\n                (cursor.from < cursor.to || !nest.overlay)) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay ||\n                        (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n                    if (ranges.length)\n                        checkRanges(ranges);\n                    if (ranges.length || !nest.overlay)\n                        this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)\n                            : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length) {\n                            checkRanges(ranges);\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n                        }\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, stack = [];\n    let buffer = node.context.buffer;\n    // Scan up to the nearest tree\n    do {\n        stack.push(cursor.index);\n        cursor.parent();\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let base = cursor.tree, i = base.children.indexOf(buffer);\n    let buf = base.children[i], b = buf.buffer, newStack = [i];\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length, stackPos) {\n        let targetI = stack[stackPos];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n        let from = b[targetI + 1], to = b[targetI + 2];\n        newStack.push(children.length);\n        let child = stackPos\n            ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)\n            : node.toTree();\n        children.push(child);\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n    // Move the cursor back to the target node\n    for (let index of newStack) {\n        let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];\n        cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n    }\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}